# Exception catching (this way you can re-route what the code will do, in case of errors. It acts similar to an if/else statement)
# try:  <- Something that might cause an exception (error)
# except:  <- Do this if there was an exception
# else:  <- do this if there were no exceptions 
# finally:  <- do this no matter what happens (can be useful for closing a file if opening one)


# Example
try:
    file = open("a_file.txt")
    a_dictionary = {"key": "value"}
    print(a_dictionary["dsfsagsf"]
except FileNotFoundError (this will route into here if a FileNotFoundError error occured)
    file = open("a_file.txt", "w")
    file.write("something")
except KeyError as error_message: (the 'as error_message' will allow me to still see what errored out)
    print(f"the key {error_message} does not exist.")
else:
    content = file.read()
finally:
    file.close()
    print("File was closed.")

#BMI Example

height = float(input("Height: "))
weight = int(input("Weight: "))

if height > 3:
    raise ValueError("Human Height should not be over 3 meters.")

bmi = weight / height ** 2
print(bmi)


#JSON
Write -> json.dump()
Read -> json.load()
Update -> json.update()


# save function example in my password manager
def save():
    saved_website_name = website_entry.get()
    saved_username = username_entry.get()
    saved_password = password_entry.get()
    new_data = {
        saved_website_name: {
            "email": saved_username,
            "password": saved_password
        }
    }

    if len(saved_website_name) == 0 or len(saved_password) == 0:
        messagebox.showinfo(title="Oh no!", message="Please don't leave any fields empty!")
        return

    else:
        try:
            # opens it in read mode
            with open("password_vault.json", "r") as password_vault:
                # Reading old data (turns it from JSON -> a dict)
                data = json.load(password_vault)
                # Updating old data with new data
                data.update(new_data)

            # opens it again in write mode
            with open("password_vault.json", "w") as password_vault:
                # Saving updated data
                json.dump(data, password_vault, indent=4)
                website_entry.delete(0, END)
                password_entry.delete(0, END)

        # if there is not a "password_vault.json" file, which would produce a FileNotFoundError when trying
        # the code above, it will execute these lines of code and create the file. Which should make the above
        # code work going forward
        except FileNotFoundError:
            with open("password_vault.json", "w") as password_vault:
                json.dump(new_data, password_vault, indent=4)
                website_entry.delete(0, END)
                password_entry.delete(0, END)


